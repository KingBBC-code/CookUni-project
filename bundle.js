/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controllers_userCtrl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controllers/userCtrl */ \"./src/controllers/userCtrl.js\");\n/* harmony import */ var _controllers_recCtrl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controllers/recCtrl */ \"./src/controllers/recCtrl.js\");\n/* harmony import */ var _helpers_kinvey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/kinvey */ \"./src/helpers/kinvey.js\");\n\r\n\r\n\r\n\r\n// States or global data that are shared with views \r\n\r\nwindow.allRecipes = []; // dom data \r\nwindow.msgs = [];\r\nwindow.sharedData = {};\r\nwindow.formData = {};\r\nwindow.db = new _helpers_kinvey__WEBPACK_IMPORTED_MODULE_2__.default('kid_BkAjzXdF_', 'e715db1f331604155a1594597e411ffe7');\r\n\r\n\r\n\r\nconst app = Sammy('#rooter', function() {\r\n    this.use('Handlebars', 'hbs');\r\n\r\n\r\n    db.get('recipes', null, { username: 'guest', password: 'guest' }).then(res => {\r\n        allRecipes = res;\r\n    });\r\n\r\n    const userCtrl = new _controllers_userCtrl__WEBPACK_IMPORTED_MODULE_0__.default();\r\n    const recCtrl = new _controllers_recCtrl__WEBPACK_IMPORTED_MODULE_1__.default();\r\n\r\n    //@route    GET  /\r\n    //@desc     render Home Page \r\n    //@access   Public\r\n    this.get('#/', recCtrl.js.getHome);\r\n\r\n    //@route    GET  /recipe/create\r\n    //@desc     render create Page \r\n    //@access   Private\r\n    this.get('#/recipe/create', recCtrl.js.getCreate);\r\n        //@route    Post  /recipe/create\r\n        //@desc     store new recipe in db  \r\n        //@access   Private\r\n    this.post('#/recipe/create', recCtrl.js.postCreate);\r\n\r\n    //@route    GET  /recipe/share\r\n    //@desc     render share Page \r\n    //@access   Private\r\n    this.get('#/recipe/share', recCtrl.js.getshare);\r\n\r\n    //@route    GET  /recipe/share/:id\r\n    //@desc     render recipe share view\r\n    //@access   Public\r\n    this.get('#/recipe/share/:id', recCtrl.js.getshare);\r\n\r\n    //@route    GET  /recipe/delete/:id\r\n    //@desc     Delete a recipe\r\n    //@access   Private\r\n    this.get('#/recipe/delete/:id', recCtrl.js.getDelete);\r\n\r\n    //@route    GET  /recipe/edit/:id\r\n    //@desc     Edit a recipe\r\n    //@access   Private\r\n    this.get('#/recipe/edit/:id', recCtrl.js.getEdit);\r\n\r\n    //@route    GET  /recipe/edit/\r\n    //@desc     Process the update recipe\r\n    //@access   Private\r\n    this.post('#/recipe/edit', recCtrl.js.postEdit);\r\n\r\n    //@route    GET  /user/login\r\n    //@desc     render login Page \r\n    //@access   Public\r\n    this.get('#/user/login', userCtrl.getLogin);\r\n\r\n    //@route    GET  /user/logout\r\n    //@desc     logoout a user \r\n    //@access   Private\r\n    this.get('#/user/logout', userCtrl.getLogout);\r\n\r\n    //@route    POST  /user/login\r\n    //@desc     process and login users\r\n    //@access   Private\r\n    this.post('#/user/login', userCtrl.postLogin);\r\n\r\n    //@route    GET  /user/signup\r\n    //@desc     render signup Page \r\n    //@access   Public\r\n    this.get('#/user/signup', userCtrl.getSignup);\r\n\r\n    //@route    POST  /user/signup\r\n    //@desc     process and sigup users\r\n    //@access   Private\r\n    this.post('#/user/signup', userCtrl.postSignup);\r\n\r\n});\r\n\r\napp.run('#/');\n\n//# sourceURL=webpack://CookUni_Resources/./src/app.js?");

/***/ }),

/***/ "./src/controllers/recCtrl.js":
/*!************************************!*\
  !*** ./src/controllers/recCtrl.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Recipe)\n/* harmony export */ });\n/* harmony import */ var _validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../validation */ \"./src/validation.js\");\n\r\n\r\nfunction clearStates(viewData) {\r\n    msgs = [];\r\n    sharedData = {};\r\n    viewData = {};\r\n}\r\n\r\n\r\nfunction isAuth() {\r\n    if (sessionStorage.getItem('loggedIn')) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nclass Recipe {\r\n    getHome() {\r\n        const viewData = {...sharedData, homeActive: true, loggedIn: isAuth(), msgs };\r\n\r\n        if (allRecipes.length != 0) {\r\n            // No need to fetch from the server \r\n            viewData.allRecipes = allRecipes;\r\n            viewData.isLoading = false;\r\n            this.loadPartials({ header:'../views/partials/header.hbs', navbar: '../views/partials/navbar.hbs', notifications: '../views/partials/notifications.hbs' }).then(function() {\r\n                this.render('../views/app/home.hbs', viewData).swap();\r\n                clearStates(viewData);\r\n            });\r\n\r\n        } else {\r\n            // Go and fetch from the server \r\n\r\n            this.loadPartials({ header:'../views/partials/header.hbs', navbar: '../views/partials/navbar.hbs', notifications: '../views/partials/notifications.hbs' }).then(function() {\r\n\r\n                viewData.isLoading = true;\r\n                this.render('../views/app/home.hbs', viewData).swap();\r\n                db.get('recipes', null, { username: 'guest', password: 'guest' }).then(res => {\r\n                    viewData.allRecipes = res;\r\n                    viewData.isLoading = false;\r\n                    allRecipes = res;\r\n                    this.render('../views/app/home.hbs', viewData).swap();\r\n                    clearStates(viewData);\r\n                });\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    getCreate() {\r\n        const viewData = {loggedIn: isAuth() };\r\n        // if (formData && msgs.length !== 0) {\r\n        //     viewData.meal ? viewData.meal.input = formData.meal : '';\r\n        //     viewData.ingredients ? viewData.ingredients.input = formData.ingredients : '';\r\n        //     viewData.prepMethod ? viewData.prepMethod.input = formData.prepMethod : '';\r\n        //     viewData.desc ? viewData.desc.input = formData.desc : '';\r\n        //     viewData.foodImageURL ? viewData.foodImageURL.input = formData.foodImageURL : '';\r\n        //     viewData.msgs = msgs;\r\n        // }\r\n\r\n        this.loadPartials({\r\n            header: '../views/partials/header.hbs',\r\n            footer: '../views/partials/footer.hbs',\r\n            notifications: '../views/partials/notifications.hbs',\r\n        }).then(function() {\r\n            this.render('../views/app/create.hbs', viewData).swap();\r\n            clearStates(viewData);\r\n        })\r\n    }\r\n\r\n\r\n    postCreate() {\r\n        let { meal, ingredients, prepMethod, desc, foodImageURL, category } = this.params;\r\n        // formData = { meal, ingredients, prepMethod, description, price, foodimageUrl, category, id };\r\n        let formData = {\r\n            \"meal\": meal,\r\n            \"ingredients\": ingredients.split(\", \"),\r\n            \"prepMethod\": prepMethod,\r\n            \"description\": description,\r\n            \"foodImageURL\": foodImageURL,\r\n            \"category\": category,\r\n            \"likesCounter\": 0,\r\n            \"categoryImageURL\": `https://${category}`\r\n        };\r\n        let isValid = (0,_validation__WEBPACK_IMPORTED_MODULE_0__.createValidation)(formData);\r\n\r\n        if (isValid) {\r\n            let serverData = {...formData, user: sessionStorage.getItem('user') }\r\n            db.post('recipes', serverData, sessionStorage.getItem('loggedIn')).then(res => {\r\n                msgs.push({ msg: 'Recipe created successully !', class: 'alert-success' });\r\n                allRecipes.push({...serverData, _id: res._id });\r\n                this.redirect('#/');\r\n            })\r\n        } else {\r\n            this.redirect('#/Recipe/create');\r\n        }\r\n    }\r\n\r\n    getShare() {\r\n        const viewData = { shareActive: true, loggedIn: isAuth(), msgs };\r\n\r\n        let myRecipes = allRecipes.filter(rec => rec.user == sessionStorage.getItem('user'));\r\n\r\n        \r\n        viewData.myRecipes = myRecipes;\r\n        this.loadPartials({ header:'../views/partials/header.hbs', navbar: '../views/partials/navbar.hbs', notifications: '../views/partials/notifications.hbs' }).then(function() {\r\n            this.render('../views/app/share.hbs', viewData).swap();\r\n\r\n            clearStates(viewData);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    getLikesCounter() {\r\n        let id = this.params[\"id\"];\r\n        recipe.likesCounter++;\r\n        put(\"appdata\", `recipes/${id}`, \"Kinvey\")\r\n            .then(() => {\r\n                displaySuccess(\"You liked that recipe.\");\r\n                this.redirect(`/recipe/${id}`);\r\n            })\r\n            .catch(handleError);\r\n    }\r\n\r\n    getDetails() {\r\n        const product = allRecipes.find(item => item._id.toString() === this.params.id);\r\n      \r\n        if (product) {\r\n            let viewData = { product, loggedIn: isAuth(), msgs }\r\n            this.loadPartials({ header:'../views/partials/header.hbs', navbar: '../views/partials/navbar.hbs', notifications: '../views/partials/notifications.hbs' }).then(function() {\r\n                this.render('../views/app/share.hbs', viewData).swap();\r\n                clearStates(viewData);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    getDelete() {\r\n        let id = this.params.id;\r\n        db.delete('recipes', id, sessionStorage.getItem('loggedIn')).then(() => {\r\n            allRecipes = allRecipes.filter(rec => rec._id !== id);\r\n            this.redirect('#/Recipe/share')\r\n        })\r\n    }\r\n\r\n\r\n    getEdit() {\r\n\r\n        let id = this.params.id\r\n        let Recipe = allRecipes.find(rec => rec._id == id);\r\n\r\n        let viewData = {\r\n            loggedIn: isAuth(),\r\n            editMode: true,\r\n            id: Recipes._id,\r\n            msgs,\r\n            ...sharedData\r\n        };\r\n\r\n        if (Object.keys(sharedData).length > 1) {\r\n            viewData.meal.input = formData.meal;\r\n            viewData.ingredients.input = formData.ingredients;\r\n            viewData.prepMethod.input = formData.prepMethod;\r\n            viewData.desc.input = formData.desc;\r\n            viewData.foodImageURL.input = formData.foodImageURL;\r\n            viewData.category.input = formData.category;\r\n        } else {\r\n            viewData.meal = { input: recipes.meal };\r\n            viewData.ingredients = { input: recipes.ingredients };\r\n            viewData.prepMethod = { input: recipes.prepMethod };\r\n            viewData.desc = { input: recipes.desc };\r\n            viewData.foodImageURL = { input: recipes.foodImageURL };\r\n            viewData.category = { input: recipes.category };\r\n        }\r\n\r\n\r\n        this.loadPartials({\r\n            navbar: '../views/partials/navbar.hbs',\r\n            notifications: '../views/partials/notifications.hbs'\r\n        }).then(function() {\r\n            this.render('../views/recipe/profile.hbs', viewData).swap();\r\n            clearStates(viewData);\r\n        });\r\n\r\n    }\r\n\r\n    postEdit() {\r\n        let {   formData = { meal, ingredients, prepMethod, desc, price, foodimageUrl, category, id } } = this.params;\r\n        formData = {   meal, ingredients, prepMethod, desc, foodImageURL}\r\n        let isValid = (0,_validation__WEBPACK_IMPORTED_MODULE_0__.createValidation)(formData);\r\n\r\n\r\n        if (isValid) {\r\n            let serverData = {...formData, user: sessionStorage.getItem('user') }\r\n            db.edit('recipes', id, serverData, sessionStorage.getItem('loggedIn')).then(res => {\r\n                msgs.push({ msg: 'Recipe updated successully !', class: 'alert-success' });\r\n\r\n                let index = allRecipes.findIndex(rec => rec._id == id);\r\n                allRecipes[index] = {...serverData, _id: id }\r\n\r\n                // allRecipes = allRecipes.filter(rec => rec._id !== id)\r\n                // allRecipes.push({...serverData, _id: id })\r\n\r\n                this.redirect('#/Recipe/share')\r\n            })\r\n        } else {\r\n            this.redirect(`#/Recipe/edit/${id}`)\r\n        }\r\n\r\n    }\r\n}\n\n//# sourceURL=webpack://CookUni_Resources/./src/controllers/recCtrl.js?");

/***/ }),

/***/ "./src/controllers/userCtrl.js":
/*!*************************************!*\
  !*** ./src/controllers/userCtrl.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ User)\n/* harmony export */ });\n/* harmony import */ var _validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../validation */ \"./src/validation.js\");\n\r\n\r\n\r\nfunction isAuth() {\r\n    if (sessionStorage.getItem('loggedIn')) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction clearStates(viewData) {\r\n    msgs = [];\r\n    sharedData = {};\r\n    viewData = {}\r\n}\r\nclass User {\r\n\r\n    getLogin() {\r\n        const viewData = {...sharedData, loginActive: true, loggedIn: isAuth() }\r\n\r\n        if (formData && msgs.length !== 0) {\r\n            // viewData.fName ? viewData.fName.input = formData.fName : '';\r\n            // viewData.lName ? viewData.lName.input = formData.lName : '';\r\n            viewData.userName ? viewData.userName.input = formData.userName : '';\r\n            viewData.password ? viewData.password.input = formData.password : '';\r\n            viewData.msgs = msgs;\r\n        }\r\n\r\n        this.loadPartials({\r\n            navbar: '../views/partials/navbar.hbs',\r\n            notifications: '../views/partials/notifications.hbs'\r\n        }).then(function() {\r\n            this.render('../views/users/login.hbs', viewData).swap()\r\n            clearStates(viewData);\r\n        })\r\n    }\r\n\r\n    postLogin() {\r\n\r\n        const { username, password } = this.params;\r\n        formData = { username, password };\r\n        let isValid = (0,_validation__WEBPACK_IMPORTED_MODULE_0__.loginValidation)(formData);\r\n\r\n\r\n        if (!isValid) {\r\n            this.redirect('#/user/login');\r\n            return\r\n        }\r\n\r\n        sharedData.isLoading = true;\r\n        this.redirect('#/user/login');\r\n\r\n        db.login({ username: username, password }).then(jsonRes => {\r\n            sessionStorage.setItem('user', jsonRes._id);\r\n            sessionStorage.setItem('loggedIn', jsonRes._kmd.authtoken);\r\n            msgs.push({ msg: 'Logged In successully !', class: 'alert-success' })\r\n            sharedData.isLoading = false;\r\n            this.redirect('#/furniture/profile')\r\n        }).catch(err => {\r\n            msgs.push({ msg: err.statusText, class: 'alert-danger' });\r\n            sharedData.username = {}\r\n            sharedData.username.invalid = true;\r\n            sharedData.password = {};\r\n            sharedData.isLoading = false;\r\n            this.redirect('#/user/login');\r\n        })\r\n\r\n    }\r\n\r\n\r\n    getSignup() {\r\n        const viewData = {...sharedData, signupActive: true, loggedIn: isAuth() }\r\n        if (formData && msgs.length !== 0) {\r\n            viewData.username.input = formData.username;\r\n            viewData.password.input = formData.password;\r\n            viewData.password2.input = formData.password2;\r\n            viewData.msgs = msgs;\r\n        }\r\n\r\n        this.loadPartials({\r\n            navbar: '../views/partials/navbar.hbs',\r\n            notifications: '../views/partials/notifications.hbs'\r\n        }).then(function() {\r\n            this.render('../views/users/signup.hbs', viewData).swap()\r\n            clearStates(viewData)\r\n        })\r\n    }\r\n\r\n\r\n    postSignup() {\r\n        const { username, password, password2 } = this.params;\r\n        formData = { username, password2, password };\r\n        let isValid = (0,_validation__WEBPACK_IMPORTED_MODULE_0__.signupValidation)(formData);\r\n\r\n        if (!isValid) {\r\n            this.redirect('#/user/signup');\r\n            return\r\n        }\r\n\r\n        sharedData.isLoading = true;\r\n        this.redirect('#/user/signup')\r\n        db.signup({ username: username, password }).then(res => {\r\n            console.log(res);\r\n            msgs.push({ msg: 'User Created Successfully !', class: 'alert-success' })\r\n            sharedData.isLoading = false;\r\n            this.redirect('#/user/login');\r\n            formData = {}\r\n        }).catch(err => {\r\n            if (err.status === 409) {\r\n                msgs.push({ msg: 'User Already exists!', class: 'alert-danger' });\r\n                sharedData.username = {}\r\n                sharedData.username.invalid = true;\r\n                sharedData.password = {};\r\n                sharedData.password2 = {};\r\n                sharedData.isLoading = false;\r\n                this.redirect('#/user/signup');\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    getLogout() {\r\n\r\n        let token = sessionStorage.getItem('loggedIn');\r\n        db.logout(token).then(res => {\r\n            msgs.push({ msg: 'Logged out Successfully !', class: 'alert-success' });\r\n            sessionStorage.removeItem('loggedIn');\r\n            sessionStorage.removeItem('user');\r\n            this.redirect('#/user/login');\r\n        }).catch(err => {\r\n            msgs.push({ msg: err.statusText, class: 'alert-danger' });\r\n            this.redirect('#/')\r\n        })\r\n    }\r\n}\n\n//# sourceURL=webpack://CookUni_Resources/./src/controllers/userCtrl.js?");

/***/ }),

/***/ "./src/helpers/kinvey.js":
/*!*******************************!*\
  !*** ./src/helpers/kinvey.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Kinvey)\n/* harmony export */ });\nclass Kinvey {\r\n\r\n    constructor(app_id, app_secret) {\r\n        this.app_id = app_id;\r\n        this.app_secret = app_secret\r\n    }\r\n\r\n\r\n    test(data) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/appdata/${this.app_id}`\r\n            let { username, password } = data;\r\n            let headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + btoa(username + \":\" + password)\r\n            }\r\n\r\n            fetch(url, { method: 'GET', headers: headers })\r\n                .then(res => {\r\n                    if (res.ok) {\r\n                        return res.json();\r\n                    }\r\n                    throw res;\r\n                }).then(data => resolve(data))\r\n                .catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n    get(endpoint, authToken, loginData) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/appdata/${this.app_id}/${endpoint}`;\r\n            let headers;\r\n            if (loginData) {\r\n                let { username, password } = loginData;\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Basic ' + btoa(username + \":\" + password)\r\n                }\r\n            }\r\n\r\n            if (authToken) {\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Kinvey ' + authToken\r\n                }\r\n            }\r\n\r\n            fetch(url, { method: 'GET', headers: headers })\r\n                .then(res => {\r\n                    if (res.ok) {\r\n                        return res.json();\r\n                    }\r\n                    throw res;\r\n                }).then(data => resolve(data))\r\n                .catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n\r\n    post(endpoint, data, authToken, loginData) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/appdata/${this.app_id}/${endpoint}`;\r\n            let headers;\r\n            if (loginData) {\r\n                let { username, password } = loginData;\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Basic ' + btoa(username + \":\" + password)\r\n                }\r\n\r\n            }\r\n\r\n            if (authToken) {\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Kinvey ' + authToken\r\n                }\r\n            }\r\n\r\n            fetch(url, { method: 'POST', headers: headers, body: JSON.stringify(data) })\r\n                .then(res => {\r\n                    if (res.status === 201) {\r\n                        return res.json();\r\n                    }\r\n                    throw res;\r\n                }).then(data => resolve(data))\r\n                .catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n    delete(endpoint, id, authToken, loginData) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/appdata/${this.app_id}/${endpoint}/${id}`;\r\n            let headers;\r\n            if (loginData) {\r\n                let { username, password } = loginData;\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Basic ' + btoa(username + \":\" + password)\r\n                }\r\n\r\n            }\r\n\r\n            if (authToken) {\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Kinvey ' + authToken\r\n                }\r\n            }\r\n\r\n            fetch(url, { method: 'DELETE', headers: headers })\r\n                .then(res => {\r\n                    if (res.ok) {\r\n                        return res.json();\r\n                    }\r\n                    throw res;\r\n                }).then(data => resolve(data))\r\n                .catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n\r\n    edit(endpoint, id, data, authToken, loginData) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/appdata/${this.app_id}/${endpoint}/${id}`;\r\n            let headers;\r\n            if (loginData) {\r\n                let { username, password } = loginData;\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Basic ' + btoa(username + \":\" + password)\r\n                }\r\n\r\n            }\r\n\r\n            if (authToken) {\r\n                headers = {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Kinvey ' + authToken\r\n                }\r\n            }\r\n\r\n            fetch(url, { method: 'PUT', headers: headers, body: JSON.stringify(data) })\r\n                .then(res => {\r\n                    if (res.ok) {\r\n                        return res.json();\r\n                    }\r\n                    throw res;\r\n                }).then(data => resolve(data))\r\n                .catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n\r\n    signup(data) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/user/${this.app_id}`;\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + btoa(this.app_id + \":\" + this.app_secret)\r\n            }\r\n\r\n            fetch(url, { method: 'POST', headers: headers, body: JSON.stringify(data) })\r\n                .then(res => {\r\n                    if (res.status === 201) {\r\n                        return res.json();\r\n                    }\r\n                    throw res;\r\n                }).then(data => resolve(data._kmd.authtoken))\r\n                .catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n\r\n    login(data) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/user/${this.app_id}/login`;\r\n            let { username, password } = data;\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + btoa(username + \":\" + password)\r\n            }\r\n\r\n            fetch(url, { method: 'POST', headers: headers, body: JSON.stringify(data) })\r\n                .then(res => {\r\n                    if (res.ok) {\r\n\r\n                        return res.json();\r\n                    }\r\n                    throw res;\r\n                }).then(data => resolve(data))\r\n                .catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n\r\n    logout(authToken) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = `https://baas.kinvey.com/user/${this.app_id}/_logout`;\r\n\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Kinvey ' + authToken\r\n            }\r\n\r\n            fetch(url, { method: 'POST', headers: headers })\r\n                .then(res => {\r\n                    if (res.status === 204) {\r\n                        resolve({ msg: 'user logged out' })\r\n                    }\r\n\r\n                }).catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://CookUni_Resources/./src/helpers/kinvey.js?");

/***/ }),

/***/ "./src/validation.js":
/*!***************************!*\
  !*** ./src/validation.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loginValidation\": () => (/* binding */ loginValidation),\n/* harmony export */   \"signupValidation\": () => (/* binding */ signupValidation),\n/* harmony export */   \"createValidation\": () => (/* binding */ createValidation)\n/* harmony export */ });\nconst loginValidation = ({ userName, password }) => {\r\n//remove email its not required\r\n    sharedData = { userName:{}, password: {} };\r\n\r\n    if (!userName) {\r\n        msgs.push({ msg: 'Username is required', class: 'alert-danger' });\r\n        sharedData.userName.invalid = true;\r\n\r\n    } else if (!validator.isLength(userName,{min: 2, max:15})) {\r\n        msgs.push({ msg: 'Username Should Be 3 Characters', class: 'alert-danger' });\r\n        sharedData.userName.invalid = true;\r\n    } else {\r\n        sharedData.userName.valid = true;\r\n    }\r\n\r\n    \r\n\r\n    if (!password) {\r\n        msgs.push({ msg: 'Password Field is required', class: 'alert-danger' });\r\n        sharedData.password.invalid = true;\r\n    } else if (!validator.isLength(password, { min: 6, max: 15 })) {\r\n        msgs.push({ msg: 'Password should be 6-15 characters', class: 'alert-danger' });\r\n        sharedData.password.invalid = true;\r\n    } else {\r\n        sharedData.password.valid = true;\r\n    }\r\n\r\n    let isValid = msgs.length === 0;\r\n    return isValid;\r\n};\r\n\r\n\r\nconst signupValidation = ({ fName, lName, userName, password, password2 }) => {\r\n    loginValidation({ userName, password});\r\n    sharedData.password2 = {};\r\n    if (!fName) {\r\n            msgs.push({ msg: 'First Name is required', class: 'alert-danger' });\r\n            sharedData.fName.invalid = true;\r\n\r\n        } else if (!validator.isLength(fName,{min: 2, max:15})) {\r\n            msgs.push({ msg: 'First Name Should Be 2 Characters', class: 'alert-danger' });\r\n            sharedData.fName.invalid = true;\r\n        } else {\r\n            sharedData.fName.valid = true;\r\n        }\r\n\r\n    if (!lName) {\r\n            msgs.push({ msg: 'Last Name is required', class: 'alert-danger' });\r\n            sharedData.lName.invalid = true;\r\n\r\n        } else if (!validator.isLength(lname,{min: 2, max:15})) {\r\n            msgs.push({ msg: 'Last Name Should Be 2 Characters', class: 'alert-danger' });\r\n            sharedData.lName.invalid = true;\r\n        } else {\r\n            sharedData.lName.valid = true;\r\n        }\r\n    if (!password2) {\r\n        msgs.push({ msg: 'Confirmed Password Field is required', class: 'alert-danger' });\r\n        sharedData.password2.invalid = true;\r\n        } else if (!validator.equals(password, password2)) {\r\n            msgs.push({ msg: 'Password not matching', class: 'alert-danger' });\r\n            sharedData.password2.invalid = true;\r\n        } else {\r\n            sharedData.password2.valid = true;\r\n        }\r\n\r\n    let isValid = msgs.length === 0;\r\n    return isValid;\r\n};\r\n\r\n\r\nconst createValidation = ({ meal, ingredients, prepMethod, description, foodImageURL, category }) => {\r\n    if (meal.length >= 4 &&\r\n        ingredients.length >= 2 &&\r\n        prepMethod.length >= 10 &&\r\n        description.length >= 10 &&\r\n        (foodImageURL.startsWith(\"http://\") || foodImageURL.startsWith(\"https://\")) &&\r\n        category) {\r\n        return true;\r\n    }\r\n    if (!validateData) {\r\n        sharedData.recipe = { invalid: true, valid: false, msg: 'Provide recipe' };\r\n    } else\r\n    if (!validator.isLength(recipe, { min: 4 })) {\r\n        sharedData.recipe = { invalid: true, valid: false, msg: 'Recipe should be at least 4 characters' };\r\n    } else {\r\n        sharedData.recipe = { valid: true, invalid: false };\r\n    }\r\n\r\n    if (!meal) {\r\n        sharedData.meal = { invalid: true, valid: false, msg: 'Provide meal' };\r\n    } else if (!validator.isLength(meal, { min: 4 })) {\r\n        sharedData.meal = { invalid: true, valid: false, msg: 'meal should be at least 4 characters' };\r\n    } else {\r\n        sharedData.meal = { valid: true, invalid: false };\r\n    }\r\n\r\n    if (sharedData.recipe.invalid || sharedData.meal.invalid) {\r\n        msgs.push({ msg: 'Check your input', class: 'alert-danger' });\r\n    }\r\n\r\n    let isValid = msgs.length === 0;\r\n    return isValid;\r\n};\r\n\r\n// export const createValidation = ({ meal, ingredients, prepMethod, desc, imageUrl, category }) => {\r\n\r\n//     if (!meal) {\r\n//         sharedData.meal = { invalid: true, valid: false, msg: 'Provide Meal' };\r\n//     } else if (!validator.isLength(meal, { min: 4 })) {\r\n//         sharedData.meal = { invalid: true, valid: false, msg: 'Mealshould be at least 4 characters' };\r\n//     } else {\r\n//         sharedData.meal = { valid: true, invalid: false };\r\n//     }\r\n\r\n//     if (!ingredients) {\r\n//         sharedData.ingredients = { invalid: true, valid: false, msg: 'Provide ingredients' };\r\n//     } else if (!validator.isLength(ingredients, { min: 4 })) {\r\n//         sharedData.ingredients = { invalid: true, valid: false, msg: 'ingredients should be at least 4 characters' };\r\n//     } else {\r\n//         sharedData.ingredients = { valid: true, invalid: false };\r\n//     }\r\n\r\n\r\n//     if (!prepMethod) {\r\n//         sharedData.prepMethod = { invalid: true, valid: false, msg: 'Provide prepMethod' };\r\n//     } else if (!validator.isLength(prepMethod, { min:10 })) {\r\n//         sharedData.prepMethod = { invalid: true, valid: false, msg: 'prepMethod should be 10 characters long' };\r\n//     } else {\r\n//         sharedData.prepMethod = { valid: true, invalid: false };\r\n//     }\r\n\r\n\r\n\r\n//     if (!desc) {\r\n//         sharedData.desc = { invalid: true, valid: false, msg: 'Provide Description' };\r\n//     } else if (!validator.isLength(desc, { min: 10 })) {\r\n//         sharedData.desc = { invalid: true, valid: false, msg: 'Description should be at least 10 characters' };\r\n//     } else {\r\n//         sharedData.desc = { valid: true, invalid: false };\r\n//     }\r\n\r\n//     if (!imageUrl) {\r\n//         sharedData.imageUrl = { invalid: true, valid: false, msg: 'Provide ImageUrl' };\r\n//     } else {\r\n//         sharedData.imageUrl = { valid: true, invalid: false };\r\n//     }\r\n\r\n//     if (!category) {\r\n//         sharedData.category = { invalid: true, valid: false, msg: 'Provide category' };\r\n//     } else if (!validator.isLength(desc, { min: 10 })) {\r\n//         sharedData.desc = { invalid: true, valid: false, msg: 'Description should be at least 10 characters' };\r\n//     } else {\r\n//         sharedData.desc = { valid: true, invalid: false };\r\n//     }\r\n//     if (sharedData.meal.invalid ||\r\n//         sharedData.ingredients.invalid ||\r\n//         sharedData.desc.invalid ||\r\n//         sharedData.imageUrl.invalid ||\r\n//         sharedData.prepMethod.invalid) {\r\n//         msgs.push({ msg: 'Check your input', class: 'alert-danger' });\r\n//     }\r\n\r\n//     let isValid = msgs.length === 0;\r\n//     return isValid;\r\n\r\n// };\n\n//# sourceURL=webpack://CookUni_Resources/./src/validation.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	
/******/ })()
;